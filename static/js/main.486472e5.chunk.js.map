{"version":3,"sources":["components/Card-Component.js","components/Card-List-Component.js","components/SearchBox-Component.js","redux/search/search.types.js","redux/monster/monster.types.js","App.js","redux/search/search.action.js","redux/monster/monster.action.js","serviceWorker.js","redux/search/search.reducer.js","redux/monster/monster.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["Card","props","monster","className","src","id","alt","name","email","CardList","monsters","map","key","SearchBox","onSearchChange","placeholder","type","onChange","SearchActionTypes","MonsterActionTypes","App","this","onRequestMonsters","searchField","filteredMonsters","filter","toLowerCase","includes","Component","connect","state","search","isPending","error","dispatch","event","text","target","value","payload","a","fetch","response","json","data","Boolean","window","location","hostname","match","INITIAL_STATE","searchReducer","action","isLoading","monsterReducer","combineReducers","middlewares","logger","thunkMiddleware","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAEaA,EAAO,SAACC,GAAW,IACxBC,EAAWD,EAAXC,QACP,OACE,yBAAKC,UAAU,sDACd,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,SACxE,gCAAMJ,EAAQK,KAAd,KACA,+BAAKL,EAAQM,MAAb,OCLOC,EAAW,SAAAR,GACvB,OACC,yBAAKE,UAAU,MACbF,EAAMS,SAASC,KAAI,SAAAT,GAAO,OAC1B,kBAAC,EAAD,CAAMU,IAAOV,EAAQG,GAAIH,QAAWA,SCL3BW,EAAY,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YAC3C,OACI,yBAAKZ,UAAU,OACd,2BACKA,UAAU,mCACVa,KAAK,SACLD,YAAaA,EACbE,SAAWH,M,OCTTI,EACU,sB,yBCDVC,EACa,0BADbA,EAEa,0BAFbA,EAGY,0BCkBnBC,G,kMAEFC,KAAKpB,MAAMqB,sB,+BAIJ,IAAD,EAC4CD,KAAKpB,MAA/Ca,EADF,EACEA,eAAgBS,EADlB,EACkBA,YAClBC,EAFA,EAC+Bd,SACHe,QAAO,SAAAvB,GAAO,OAC9CA,EAAQK,KAAKmB,cAAcC,SAASJ,EAAYG,kBAElD,OACE,yBAAKvB,UAAU,UACX,gDACF,kBAAC,EAAD,CACEY,YAAc,kBACdD,eAAkBA,IAEpB,kBAAC,EAAD,CAAUJ,SAAUc,S,GAlBVI,cA0BHC,eAvCS,SAAAC,GAAK,MAAK,CAC9BP,YAAaO,EAAMC,OAAOR,YAC1Bb,SAAUoB,EAAM5B,QAAQQ,SACxBsB,UAAWF,EAAM5B,QAAQ8B,UACzBC,MAAOH,EAAM5B,QAAQ+B,UAGE,SAAAC,GAAQ,MAAK,CACpCpB,eAAgB,SAACqB,GAAD,OAAWD,GCdAE,EDcwBD,EAAME,OAAOC,MCd3B,CACxCtB,KAAOE,EACPqB,QAASH,KAFoB,IAACA,GDe3Bd,kBAAmB,kBAAMY,EEfE,uCAAM,WAAOA,GAAP,iBAAAM,EAAA,6DACpCN,EAAS,CAAElB,KAAMG,IADmB,kBAGTsB,MAAM,8CAHG,cAG1BC,EAH0B,gBAIbA,EAASC,OAJI,OAI1BC,EAJ0B,OAKhCV,EAAS,CAAElB,KAAMG,EAA4CoB,QAASK,IALtC,kDAOhCV,EAAS,CAAClB,KAAMG,EAA2CoB,QAAQ,EAAD,KAPlC,0DAAN,2DF6ChBV,CAA6CT,GGnCxCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0mBChBN,IAAMC,EAAgB,CAClB3B,YAAa,IAeF4B,EAZO,WAAoC,IAAnCrB,EAAkC,uDAA1BoB,EAAeE,EAAW,uCACxD,OAAQA,EAAOpC,MACd,KAAKE,EACJ,OAAO,EAAP,GACIY,EADJ,CAECP,YAAa6B,EAAOb,UAEtB,QACC,OAAOT,I,yjBCZV,IAAMoB,EAAgB,CAClBxC,SAAS,GACT2C,WAAW,EACXpB,MAAM,IA+BKqB,EA5BQ,WAAoC,IAAnCxB,EAAkC,uDAA1BoB,EAAeE,EAAW,uCACzD,OAAQA,EAAOpC,MAEd,KAAKG,EACJ,OAAO,KACHW,EADJ,CAECuB,WAAW,IAGb,KAAKlC,EACJ,OAAO,KACHW,EADJ,CAECuB,WAAW,EACX3C,SAAU0C,EAAOb,UAGnB,KAAKpB,EACJ,OAAO,KACHW,EADJ,CAECuB,WAAW,EACXpB,MAAOmB,EAAOb,UAGhB,QACC,OAAOT,IC3BKyB,cAAgB,CAC9BxB,OAAQoB,EACRjD,QAASoD,ICDJE,EAAc,CAACC,IAAQC,KAIdC,EAFDC,YAAYC,EAAaC,IAAe,WAAf,EAAmBN,ICC1DO,IAASC,OACR,kBAAC,IAAD,CAAUL,MAAOA,GAChB,kBAAC,EAAD,OAEDM,SAASC,eAAe,SLoHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.486472e5.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Card = (props) => {\n\tconst {monster} = props;\n\treturn(\n\t\t <div className=\"bg-light-blue tc dib br3 pa3 ma2 grow bw2 shadow-5\">\n\t\t \t<img src={`https://robohash.org/${monster.id}?set=set2&size=200x200`} alt='robo'/>\n\t    \t<h2> {monster.name} </h2>\n\t    \t<p> {monster.email} </p>\n\t\t</div>\n\t)\n}\n\n//export default Card;","import React from 'react';\nimport { Card } from './Card-Component';\n\nexport const CardList = props => {\n\treturn (\n\t\t<div className='tc'>\n\t\t\t{props.monsters.map(monster => (\n\t\t\t\t<Card key = {monster.id} monster = {monster}/>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\n//export default CardList;\n","import React from 'react';\n\nexport const SearchBox = ({ onSearchChange, placeholder }) => {\n\treturn (\n\t    <div className='pa2'>\n\t    \t<input \n\t          className='pa3 ba b--green bg-lightest-blue'\n\t          type=\"search\" \n\t          placeholder={placeholder}\n\t          onChange ={onSearchChange}\n        \t/>\n\t    </div>\n  );\n}\n\n","export const SearchActionTypes = {\n\tCHANGE_SEARCH_FIELD : 'CHANGE_SEARCH_FIELD'\n};","export const MonsterActionTypes = {\n\tMONSTER_LOADING_PENDING: 'MONSTER_LOADING_PENDING',\n\tMONSTER_LOADING_SUCCESS: 'MONSTER_LOADING_SUCCESS',\n\tMONSTER_LOADING_FAILED: 'MONSTER_LOADING_PENDING'\t\n};","import React, { Component } from 'react';\nimport { CardList } from './components/Card-List-Component';\nimport { SearchBox } from './components/SearchBox-Component';\nimport { connect } from 'react-redux';\nimport { setSearchField } from './redux/search/search.action';\nimport { requestMonsters } from './redux/monster/monster.action';\nimport './App.css';\n\nconst mapStateToProps = state => ({\n    searchField: state.search.searchField,\n    monsters: state.monster.monsters,\n    isPending: state.monster.isPending,\n    error: state.monster.error\n})\n\nconst mapDispatchToProps = dispatch => ({\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestMonsters: () => dispatch(requestMonsters())\n\n})\n\nclass App extends Component {\n  componentDidMount(){\n    this.props.onRequestMonsters();  \n  }\n\n \n  render(){\n    const { onSearchChange, searchField, monsters } = this.props;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    return (\n      <div className=\"App tc\">\n          <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder = 'Search Monsters'\n          onSearchChange = {onSearchChange}\n        />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { SearchActionTypes } from './search.types';\n\nexport const setSearchField = (text) => ({\n\ttype:  SearchActionTypes.CHANGE_SEARCH_FIELD,\n\tpayload: text\n})","import { MonsterActionTypes } from './monster.types';\n\nexport const requestMonsters = () => async (dispatch) => {\n\tdispatch({ type: MonsterActionTypes.MONSTER_LOADING_PENDING });\n    try {\n    \tconst response = await fetch('https://jsonplaceholder.typicode.com/users');\n    \tconst data = await response.json()\n    \tdispatch({ type: MonsterActionTypes.MONSTER_LOADING_SUCCESS, payload: data})\n    } catch(error){\n    \tdispatch({type: MonsterActionTypes.MONSTER_LOADING_FAILED, payload: error})\n    }\t\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SearchActionTypes } from './search.types';\n\nconst INITIAL_STATE = {\n    searchField: ''\n}\n\nconst searchReducer = (state = INITIAL_STATE, action) => {\n\tswitch (action.type) {\n\t\tcase SearchActionTypes.CHANGE_SEARCH_FIELD:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tsearchField: action.payload\n\t\t\t}\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default searchReducer;","import { MonsterActionTypes } from './monster.types';\n\nconst INITIAL_STATE = {\n    monsters:[],\n    isLoading: false,\n    error:''\n}\n\nconst monsterReducer = (state = INITIAL_STATE, action) => {\n\tswitch (action.type) {\n\n\t\tcase MonsterActionTypes.MONSTER_LOADING_PENDING:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: true,\n\t\t\t}\n\t\t\n\t\tcase MonsterActionTypes.MONSTER_LOADING_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: false,\n\t\t\t\tmonsters: action.payload\n\t\t\t}\n\n\t\tcase MonsterActionTypes.MONSTER_LOADING_FAILED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: false,\n\t\t\t\terror: action.payload\n\t\t\t}\t\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default monsterReducer;\n","import { combineReducers } from 'redux';\n\nimport searchReducer from './search/search.reducer';\nimport monsterReducer from './monster/monster.reducer';\n\nexport default combineReducers({\n\tsearch: searchReducer,\n\tmonster: monsterReducer\n})","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport logger from 'redux-logger';\n\nimport rootReducer from './root-reducer';\n\nconst middlewares = [logger, thunkMiddleware];\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, \n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}